pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Docker Build') {
            steps {
                sh 'docker build -t myapp .'
            }
        }
        
        stage('Docker Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-registry', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                }
                sh 'docker tag myapp myregistry/myapp:latest'
                sh 'docker push myregistry/myapp:latest'
            }
        }
        
        stage('Deploy') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'kubernetes-cluster', usernameVariable: 'KUBERNETES_USERNAME', passwordVariable: 'KUBERNETES_PASSWORD')]) {
                    sh 'kubectl config set-cluster mycluster --server=https://mycluster.com --insecure-skip-tls-verify'
                    sh 'kubectl config set-credentials user --username=$KUBERNETES_USERNAME --password=$KUBERNETES_PASSWORD'
                    sh 'kubectl config set-context mycontext --cluster=mycluster --user=user'
                    sh 'kubectl config use-context mycontext'
                }
                sh 'kubectl apply -f kubernetes-manifests/'
            }
        }
    }
    
    post {
        always {
            junit 'target/surefire-reports/*.xml'
            emailext (
                to: 'devops@example.com',
                subject: "${currentBuild.fullDisplayName} ${currentBuild.result}",
                body: "${BUILD_URL}console\n\n${CHANGES_SINCE_LAST_SUCCESS, reverse=true, format=\"%a:\\ %m\\ (%c)\\ %p\"}\n\n${FILE,path=\"target/surefire-reports/TEST-com.example.MyTest.xml\"}"
            )
        }
    }
}

